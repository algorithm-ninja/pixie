(function() {var type_impls = {
"pixie_uefi":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,\n    &lt;P as Deref&gt;::Target: Unpin,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(pointer: P) -&gt; Pin&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new <code>Pin&lt;P&gt;</code> around a pointer to some data of a type that\nimplements [<code>Unpin</code>].</p>\n<p>Unlike <code>Pin::new_unchecked</code>, this method is safe because the pointer\n<code>P</code> dereferences to an [<code>Unpin</code>] type, which cancels the pinning guarantees.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val: u8 = <span class=\"number\">5</span>;\n<span class=\"comment\">// We can pin the value, since it doesn't care about being moved\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pinned: Pin&lt;<span class=\"kw-2\">&amp;mut </span>u8&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>val);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.39.0, const unstable\">1.39.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span><h4 class=\"code-header\">pub fn <a class=\"fn\">into_inner</a>(pin: Pin&lt;P&gt;) -&gt; P</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>Pin&lt;P&gt;</code> returning the underlying pointer.</p>\n<p>This requires that the data inside this <code>Pin</code> implements [<code>Unpin</code>] so that we\ncan ignore the pinning invariants when unwrapping it.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val: u8 = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>pinned: Pin&lt;<span class=\"kw-2\">&amp;mut </span>u8&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>val);\n<span class=\"comment\">// Unwrap the pin to get a reference to the value\n</span><span class=\"kw\">let </span>r = Pin::into_inner(pinned);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>r, <span class=\"number\">5</span>);</code></pre></div>\n</div></details></div></details>",0,"pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">new_unchecked</a>(pointer: P) -&gt; Pin&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new <code>Pin&lt;P&gt;</code> around a reference to some data of a type that\nmay or may not implement <code>Unpin</code>.</p>\n<p>If <code>pointer</code> dereferences to an <code>Unpin</code> type, <code>Pin::new</code> should be used\ninstead.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>This constructor is unsafe because we cannot guarantee that the data\npointed to by <code>pointer</code> is pinned, meaning that the data will not be moved or\nits storage invalidated until it gets dropped. If the constructed <code>Pin&lt;P&gt;</code> does\nnot guarantee that the data <code>P</code> points to is pinned, that is a violation of\nthe API contract and may lead to undefined behavior in later (safe) operations.</p>\n<p>By using this method, you are making a promise about the <code>P::Deref</code> and\n<code>P::DerefMut</code> implementations, if they exist. Most importantly, they\nmust not move out of their <code>self</code> arguments: <code>Pin::as_mut</code> and <code>Pin::as_ref</code>\nwill call <code>DerefMut::deref_mut</code> and <code>Deref::deref</code> <em>on the pinned pointer</em>\nand expect these methods to uphold the pinning invariants.\nMoreover, by calling this method you promise that the reference <code>P</code>\ndereferences to will not be moved out of again; in particular, it\nmust not be possible to obtain a <code>&amp;mut P::Target</code> and then\nmove out of that reference (using, for example <a href=\"crate::mem::swap\"><code>mem::swap</code></a>).</p>\n<p>For example, calling <code>Pin::new_unchecked</code> on an <code>&amp;'a mut T</code> is unsafe because\nwhile you are able to pin it for the given lifetime <code>'a</code>, you have no control\nover whether it is kept pinned once <code>'a</code> ends:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n<span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">fn </span>move_pinned_ref&lt;T&gt;(<span class=\"kw-2\">mut </span>a: T, <span class=\"kw-2\">mut </span>b: T) {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>p: Pin&lt;<span class=\"kw-2\">&amp;mut </span>T&gt; = Pin::new_unchecked(<span class=\"kw-2\">&amp;mut </span>a);\n        <span class=\"comment\">// This should mean the pointee `a` can never move again.\n    </span>}\n    mem::swap(<span class=\"kw-2\">&amp;mut </span>a, <span class=\"kw-2\">&amp;mut </span>b); <span class=\"comment\">// Potential UB down the road ⚠️\n    // The address of `a` changed to `b`'s stack slot, so `a` got moved even\n    // though we have previously pinned it! We have violated the pinning API contract.\n</span>}</code></pre></div>\n<p>A value, once pinned, must remain pinned until it is dropped (unless its type implements\n<code>Unpin</code>). Because <code>Pin&lt;&amp;mut T&gt;</code> does not own the value, dropping the <code>Pin</code> will not drop\nthe value and will not end the pinning contract. So moving the value after dropping the\n<code>Pin&lt;&amp;mut T&gt;</code> is still a violation of the API contract.</p>\n<p>Similarly, calling <code>Pin::new_unchecked</code> on an <code>Rc&lt;T&gt;</code> is unsafe because there could be\naliases to the same data that are not subject to the pinning restrictions:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::rc::Rc;\n<span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">fn </span>move_pinned_rc&lt;T&gt;(<span class=\"kw-2\">mut </span>x: Rc&lt;T&gt;) {\n    <span class=\"kw\">let </span>pinned = <span class=\"kw\">unsafe </span>{ Pin::new_unchecked(Rc::clone(<span class=\"kw-2\">&amp;</span>x)) };\n    {\n        <span class=\"kw\">let </span>p: Pin&lt;<span class=\"kw-2\">&amp;</span>T&gt; = pinned.as_ref();\n        <span class=\"comment\">// This should mean the pointee can never move again.\n    </span>}\n    drop(pinned);\n    <span class=\"kw\">let </span>content = Rc::get_mut(<span class=\"kw-2\">&amp;mut </span>x).unwrap(); <span class=\"comment\">// Potential UB down the road ⚠️\n    // Now, if `x` was the only reference, we have a mutable reference to\n    // data that we pinned above, which we could use to move it as we have\n    // seen in the previous example. We have violated the pinning API contract.\n </span>}</code></pre></div>\n<h6 id=\"pinning-of-closure-captures\"><a href=\"#pinning-of-closure-captures\">Pinning of closure captures</a></h6>\n<p>Particular care is required when using <code>Pin::new_unchecked</code> in a closure:\n<code>Pin::new_unchecked(&amp;mut var)</code> where <code>var</code> is a by-value (moved) closure capture\nimplicitly makes the promise that the closure itself is pinned, and that <em>all</em> uses\nof this closure capture respect that pinning.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n<span class=\"kw\">use </span>std::task::Context;\n<span class=\"kw\">use </span>std::future::Future;\n\n<span class=\"kw\">fn </span>move_pinned_closure(<span class=\"kw-2\">mut </span>x: <span class=\"kw\">impl </span>Future, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) {\n    <span class=\"comment\">// Create a closure that moves `x`, and then internally uses it in a pinned way.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>closure = <span class=\"kw\">move </span>|| <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>_ignore = Pin::new_unchecked(<span class=\"kw-2\">&amp;mut </span>x).poll(cx);\n    };\n    <span class=\"comment\">// Call the closure, so the future can assume it has been pinned.\n    </span>closure();\n    <span class=\"comment\">// Move the closure somewhere else. This also moves `x`!\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>moved = closure;\n    <span class=\"comment\">// Calling it again means we polled the future from two different locations,\n    // violating the pinning API contract.\n    </span>moved(); <span class=\"comment\">// Potential UB ⚠️\n</span>}</code></pre></div>\n<p>When passing a closure to another API, it might be moving the closure any time, so\n<code>Pin::new_unchecked</code> on closure captures may only be used if the API explicitly documents\nthat the closure is pinned.</p>\n<p>The better alternative is to avoid all that trouble and do the pinning in the outer function\ninstead (here using the [<code>pin!</code>][crate::pin::pin] macro):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::pin;\n<span class=\"kw\">use </span>std::task::Context;\n<span class=\"kw\">use </span>std::future::Future;\n\n<span class=\"kw\">fn </span>move_pinned_closure(<span class=\"kw-2\">mut </span>x: <span class=\"kw\">impl </span>Future, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"macro\">pin!</span>(x);\n    <span class=\"comment\">// Create a closure that captures `x: Pin&lt;&amp;mut _&gt;`, which is safe to move.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>closure = <span class=\"kw\">move </span>|| {\n        <span class=\"kw\">let </span>_ignore = x.as_mut().poll(cx);\n    };\n    <span class=\"comment\">// Call the closure, so the future can assume it has been pinned.\n    </span>closure();\n    <span class=\"comment\">// Move the closure somewhere else.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>moved = closure;\n    <span class=\"comment\">// Calling it again here is fine (except that we might be polling a future that already\n    // returned `Poll::Ready`, but that is a separate problem).\n    </span>moved();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; Pin&lt;&amp;&lt;P as Deref&gt;::Target&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a pinned shared reference from this pinned pointer.</p>\n<p>This is a generic method to go from <code>&amp;Pin&lt;Pointer&lt;T&gt;&gt;</code> to <code>Pin&lt;&amp;T&gt;</code>.\nIt is safe because, as part of the contract of <code>Pin::new_unchecked</code>,\nthe pointee cannot move after <code>Pin&lt;Pointer&lt;T&gt;&gt;</code> got created.\n“Malicious” implementations of <code>Pointer::Deref</code> are likewise\nruled out by the contract of <code>Pin::new_unchecked</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.39.0, const unstable\">1.39.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">into_inner_unchecked</a>(pin: Pin&lt;P&gt;) -&gt; P</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>Pin&lt;P&gt;</code> returning the underlying pointer.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>This function is unsafe. You must guarantee that you will continue to\ntreat the pointer <code>P</code> as pinned after you call this function, so that\nthe invariants on the <code>Pin</code> type can be upheld. If the code using the\nresulting <code>P</code> does not continue to maintain the pinning invariants that\nis a violation of the API contract and may lead to undefined behavior in\nlater (safe) operations.</p>\n<p>If the underlying data is [<code>Unpin</code>], [<code>Pin::into_inner</code>] should be used\ninstead.</p>\n</div></details></div></details>",0,"pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut</a>(&amp;mut self) -&gt; Pin&lt;&amp;mut &lt;P as Deref&gt;::Target&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a pinned mutable reference from this pinned pointer.</p>\n<p>This is a generic method to go from <code>&amp;mut Pin&lt;Pointer&lt;T&gt;&gt;</code> to <code>Pin&lt;&amp;mut T&gt;</code>.\nIt is safe because, as part of the contract of <code>Pin::new_unchecked</code>,\nthe pointee cannot move after <code>Pin&lt;Pointer&lt;T&gt;&gt;</code> got created.\n“Malicious” implementations of <code>Pointer::DerefMut</code> are likewise\nruled out by the contract of <code>Pin::new_unchecked</code>.</p>\n<p>This method is useful when doing multiple calls to functions that consume the pinned type.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">impl </span>Type {\n    <span class=\"kw\">fn </span>method(<span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;) {\n        <span class=\"comment\">// do something\n    </span>}\n\n    <span class=\"kw\">fn </span>call_method_twice(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;) {\n        <span class=\"comment\">// `method` consumes `self`, so reborrow the `Pin&lt;&amp;mut Self&gt;` via `as_mut`.\n        </span><span class=\"self\">self</span>.as_mut().method();\n        <span class=\"self\">self</span>.as_mut().method();\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">set</a>(&amp;mut self, value: &lt;P as Deref&gt;::Target)<div class=\"where\">where\n    &lt;P as Deref&gt;::Target: Sized,</div></h4></section></summary><div class=\"docblock\"><p>Assigns a new value to the memory behind the pinned reference.</p>\n<p>This overwrites pinned data, but that is okay: its destructor gets\nrun before being overwritten, so no pinning guarantee is violated.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val: u8 = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pinned: Pin&lt;<span class=\"kw-2\">&amp;mut </span>u8&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>val);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, pinned); <span class=\"comment\">// 5\n</span>pinned.as_mut().set(<span class=\"number\">10</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, pinned); <span class=\"comment\">// 10</span></code></pre></div>\n</div></details></div></details>",0,"pixie_uefi::os::executor::BoxFuture"],["<section id=\"impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, U&gt; DispatchFromDyn&lt;Pin&lt;U&gt;&gt; for Pin&lt;P&gt;<div class=\"where\">where\n    P: DispatchFromDyn&lt;U&gt;,</div></h3></section>","DispatchFromDyn<Pin<U>>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Debug-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Debug for Pin&lt;P&gt;<div class=\"where\">where\n    P: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","pixie_uefi::os::executor::BoxFuture"],["<section id=\"impl-Copy-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Copy-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Copy for Pin&lt;P&gt;<div class=\"where\">where\n    P: Copy,</div></h3></section>","Copy","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CPin%3CQ%3E%3E-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-PartialOrd%3CPin%3CQ%3E%3E-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, Q&gt; PartialOrd&lt;Pin&lt;Q&gt;&gt; for Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,\n    Q: Deref,\n    &lt;P as Deref&gt;::Target: PartialOrd&lt;&lt;Q as Deref&gt;::Target&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a>Read more</a></div></details></div></details>","PartialOrd<Pin<Q>>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Future-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.36.0\">1.36.0</span><a href=\"#impl-Future-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Future for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut,\n    &lt;P as Deref&gt;::Target: Future,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;&lt;P as Deref&gt;::Target as Future&gt;::Output</h4></section></summary><div class='docblock'>The type of value produced on completion.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method trait-impl\"><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    cx: &amp;mut Context&lt;'_&gt;\n) -&gt; Poll&lt;&lt;Pin&lt;P&gt; as Future&gt;::Output&gt;</h4></section></summary><div class='docblock'>Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. <a>Read more</a></div></details></div></details>","Future","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-DerefMut-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DerefMut for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut,\n    &lt;P as Deref&gt;::Target: Unpin,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;P as Deref&gt;::Target</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Clone-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Clone for Pin&lt;P&gt;<div class=\"where\">where\n    P: Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; Pin&lt;P&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","pixie_uefi::os::executor::BoxFuture"],["<section id=\"impl-CoerceUnsized%3CPin%3CU%3E%3E-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-CoerceUnsized%3CPin%3CU%3E%3E-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, U&gt; CoerceUnsized&lt;Pin&lt;U&gt;&gt; for Pin&lt;P&gt;<div class=\"where\">where\n    P: CoerceUnsized&lt;U&gt;,</div></h3></section>","CoerceUnsized<Pin<U>>","pixie_uefi::os::executor::BoxFuture"],["<section id=\"impl-Eq-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-Eq-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Eq for Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,\n    &lt;P as Deref&gt;::Target: Eq,</div></h3></section>","Eq","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-Ord-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Ord for Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,\n    &lt;P as Deref&gt;::Target: Ord,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, other: &amp;Pin&lt;P&gt;) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized + PartialOrd,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Deref-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Deref for Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Target</a> = &lt;P as Deref&gt;::Target</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;P as Deref&gt;::Target</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncIterator-for-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-AsyncIterator-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; AsyncIterator for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut,\n    &lt;P as Deref&gt;::Target: AsyncIterator,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = &lt;&lt;P as Deref&gt;::Target as AsyncIterator&gt;::Item</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>)</span></div></span><div class='docblock'>The type of items yielded by the async iterator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_next</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    cx: &amp;mut Context&lt;'_&gt;\n) -&gt; Poll&lt;Option&lt;&lt;Pin&lt;P&gt; as AsyncIterator&gt;::Item&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>)</span></div></span><div class='docblock'>Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the async iterator is exhausted. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; (usize, Option&lt;usize&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>)</span></div></span><div class='docblock'>Returns the bounds on the remaining length of the async iterator. <a>Read more</a></div></details></div></details>","AsyncIterator","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPin%3CQ%3E%3E-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-PartialEq%3CPin%3CQ%3E%3E-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, Q&gt; PartialEq&lt;Pin&lt;Q&gt;&gt; for Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,\n    Q: Deref,\n    &lt;P as Deref&gt;::Target: PartialEq&lt;&lt;Q as Deref&gt;::Target&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Pin&lt;Q&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Pin<Q>>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-Hash-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Hash for Pin&lt;P&gt;<div class=\"where\">where\n    P: Deref,\n    &lt;P as Deref&gt;::Target: Hash,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Pointer-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Pointer for Pin&lt;P&gt;<div class=\"where\">where\n    P: Pointer,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Pin%3CP%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Display-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Display for Pin&lt;P&gt;<div class=\"where\">where\n    P: Display,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Display","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; From&lt;Box&lt;T, A&gt;&gt; for Pin&lt;Box&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: Allocator + 'static,\n    T: ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(boxed: Box&lt;T, A&gt;) -&gt; Pin&lt;Box&lt;T, A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement [<code>Unpin</code>], then\n<code>*boxed</code> will be pinned in memory and unable to be moved.</p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<p>This is also available via [<code>Box::into_pin</code>].</p>\n<p>Constructing and pinning a <code>Box</code> with <code>&lt;Pin&lt;Box&lt;T&gt;&gt;&gt;::from([Box::new](x))</code>\ncan also be written more concisely using <code>[Box::pin](x)</code>.\nThis <code>From</code> implementation is useful if you already have a <code>Box&lt;T&gt;</code>, or you are\nconstructing a (pinned) <code>Box</code> in a different way than with [<code>Box::new</code>].</p>\n</div></details></div></details>","From<Box<T, A>>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"impl\"><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; Coroutine&lt;R&gt; for Pin&lt;Box&lt;G, A&gt;&gt;<div class=\"where\">where\n    G: Coroutine&lt;R&gt; + ?Sized,\n    A: Allocator + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Yield</a> = &lt;G as Coroutine&lt;R&gt;&gt;::Yield</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>The type of value this coroutine yields. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Return</a> = &lt;G as Coroutine&lt;R&gt;&gt;::Return</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>The type of value this coroutine returns. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume\" class=\"method trait-impl\"><a href=\"#method.resume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">resume</a>(\n    self: Pin&lt;&amp;mut Pin&lt;Box&lt;G, A&gt;&gt;&gt;,\n    arg: R\n) -&gt; CoroutineState&lt;&lt;Pin&lt;Box&lt;G, A&gt;&gt; as Coroutine&lt;R&gt;&gt;::Yield, &lt;Pin&lt;Box&lt;G, A&gt;&gt; as Coroutine&lt;R&gt;&gt;::Return&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>Resumes the execution of this coroutine. <a>Read more</a></div></details></div></details>","Coroutine<R>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FusedStream-for-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-FusedStream-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; FusedStream for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut + Unpin,\n    &lt;P as Deref&gt;::Target: FusedStream,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminated\" class=\"method trait-impl\"><a href=\"#method.is_terminated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_terminated</a>(&amp;self) -&gt; bool</h4></section></summary><div class='docblock'>Returns <code>true</code> if the stream should no longer be polled.</div></details></div></details>","FusedStream","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FusedFuture-for-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-FusedFuture-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; FusedFuture for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut + Unpin,\n    &lt;P as Deref&gt;::Target: FusedFuture,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminated\" class=\"method trait-impl\"><a href=\"#method.is_terminated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_terminated</a>(&amp;self) -&gt; bool</h4></section></summary><div class='docblock'>Returns <code>true</code> if the underlying future should no longer be polled.</div></details></div></details>","FusedFuture","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-Stream-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Stream for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut + Unpin,\n    &lt;P as Deref&gt;::Target: Stream,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = &lt;&lt;P as Deref&gt;::Target as Stream&gt;::Item</h4></section></summary><div class='docblock'>Values yielded by the stream.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_next</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    cx: &amp;mut Context&lt;'_&gt;\n) -&gt; Poll&lt;Option&lt;&lt;Pin&lt;P&gt; as Stream&gt;::Item&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to pull out the next value of this stream, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the stream is exhausted. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; (usize, Option&lt;usize&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the stream. <a>Read more</a></div></details></div></details>","Stream","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnsafeFutureObj%3C'a,+T%3E-for-Pin%3CBox%3Cdyn+Future%3COutput+=+T%3E+%2B+Send%3E%3E\" class=\"impl\"><a href=\"#impl-UnsafeFutureObj%3C'a,+T%3E-for-Pin%3CBox%3Cdyn+Future%3COutput+=+T%3E+%2B+Send%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; UnsafeFutureObj&lt;'a, T&gt; for Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + Send + 'a&gt;&gt;<div class=\"where\">where\n    T: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method trait-impl\"><a href=\"#method.into_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_raw</a>(self) -&gt; *mut dyn Future&lt;Output = T&gt; + 'a</h4></section></summary><div class='docblock'>Convert an owned instance into a (conceptually owned) fat pointer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">drop</a>(ptr: *mut dyn Future&lt;Output = T&gt; + 'a)</h4></section></summary><div class='docblock'>Drops the future represented by the given fat pointer. <a>Read more</a></div></details></div></details>","UnsafeFutureObj<'a, T>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnsafeFutureObj%3C'a,+T%3E-for-Pin%3CBox%3CF%3E%3E\" class=\"impl\"><a href=\"#impl-UnsafeFutureObj%3C'a,+T%3E-for-Pin%3CBox%3CF%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, F&gt; UnsafeFutureObj&lt;'a, T&gt; for Pin&lt;Box&lt;F&gt;&gt;<div class=\"where\">where\n    F: Future&lt;Output = T&gt; + 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method trait-impl\"><a href=\"#method.into_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_raw</a>(self) -&gt; *mut dyn Future&lt;Output = T&gt; + 'a</h4></section></summary><div class='docblock'>Convert an owned instance into a (conceptually owned) fat pointer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">drop</a>(ptr: *mut dyn Future&lt;Output = T&gt; + 'a)</h4></section></summary><div class='docblock'>Drops the future represented by the given fat pointer. <a>Read more</a></div></details></div></details>","UnsafeFutureObj<'a, T>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnsafeFutureObj%3C'a,+T%3E-for-Pin%3CBox%3Cdyn+Future%3COutput+=+T%3E%3E%3E\" class=\"impl\"><a href=\"#impl-UnsafeFutureObj%3C'a,+T%3E-for-Pin%3CBox%3Cdyn+Future%3COutput+=+T%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; UnsafeFutureObj&lt;'a, T&gt; for Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + 'a&gt;&gt;<div class=\"where\">where\n    T: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method trait-impl\"><a href=\"#method.into_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_raw</a>(self) -&gt; *mut dyn Future&lt;Output = T&gt; + 'a</h4></section></summary><div class='docblock'>Convert an owned instance into a (conceptually owned) fat pointer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">drop</a>(ptr: *mut dyn Future&lt;Output = T&gt; + 'a)</h4></section></summary><div class='docblock'>Drops the future represented by the given fat pointer. <a>Read more</a></div></details></div></details>","UnsafeFutureObj<'a, T>","pixie_uefi::os::executor::BoxFuture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CItem%3E-for-Pin%3CP%3E\" class=\"impl\"><a href=\"#impl-Sink%3CItem%3E-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, Item&gt; Sink&lt;Item&gt; for Pin&lt;P&gt;<div class=\"where\">where\n    P: DerefMut + Unpin,\n    &lt;P as Deref&gt;::Target: Sink&lt;Item&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = &lt;&lt;P as Deref&gt;::Target as Sink&lt;Item&gt;&gt;::Error</h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    cx: &amp;mut Context&lt;'_&gt;\n) -&gt; Poll&lt;Result&lt;(), &lt;Pin&lt;P&gt; as Sink&lt;Item&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    item: Item\n) -&gt; Result&lt;(), &lt;Pin&lt;P&gt; as Sink&lt;Item&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    cx: &amp;mut Context&lt;'_&gt;\n) -&gt; Poll&lt;Result&lt;(), &lt;Pin&lt;P&gt; as Sink&lt;Item&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: Pin&lt;&amp;mut Pin&lt;P&gt;&gt;,\n    cx: &amp;mut Context&lt;'_&gt;\n) -&gt; Poll&lt;Result&lt;(), &lt;Pin&lt;P&gt; as Sink&lt;Item&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<Item>","pixie_uefi::os::executor::BoxFuture"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()